import logging
import socket
import os

try:
    from .helpers import setup_logging
    from .const import rovers
except ImportError:
    from helpers import setup_logging
    from const import rovers

class RoverControllerMain:
    def __init__(self, initial_x=0, initial_y=0, initial_yaw=0, logger=None):
        self.logger = logger or setup_logging('rover')
        
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
        
        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥–æ–≥–æ —Ä–æ–≤–µ—Ä–∞
        self.rover_positions = {}
        for rover_id in rovers.keys():
            self.rover_positions[rover_id] = {'x': 0, 'y': 0, 'yaw': 0}

    def send_command(self, rover_id, command_str):
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        rover_config = rovers[rover_id]
        robot_ip = rover_config['ip']
        robot_port = rover_config['port']
        
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id} ({robot_ip}:{robot_port}): {command_str}")
        try:
            self.sock.sendto(command_str.encode('utf-8'), (robot_ip, robot_port))
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id}: {e}")
            return False

    def get_pose(self, rover_id):
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return None
            
        self.logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–≤–µ—Ä–∞ {rover_id}")
        return self.send_command(rover_id, "POSE")

    def navigate(self, rover_id, current_x=0, current_y=0, current_yaw=0, x=0, y=0):
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.logger.info(f"–ù–∞—á–∞–ª–æ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id} -> ({x}, {y}, {current_yaw})")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å
        if not self.send_command(rover_id, f"TARGET:{x},{y}"):
            return False
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–æ–≤–µ—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è
        current_pos = self.rover_positions[rover_id]
        if not self.send_command(rover_id, f"POSE:{current_x},{current_y},{current_yaw}"):
            return False
            
        self.logger.info(f"–ö–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–æ–≤–µ—Ä—É {rover_id}. –†–æ–±–æ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–æ–≤–µ—Ä–∞
        return True
    
    def set_rover_position(self, rover_id, x, y, yaw):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–æ–≤–µ—Ä–∞ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)"""
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.rover_positions[rover_id] = {'x': x, 'y': y, 'yaw': yaw}
        self.logger.info(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ {rover_id}: ({x}, {y}, {yaw})")
        return True


class RoverControllerMock:
    def __init__(self, drone_name=None, logger=None):
        self.drone_name = drone_name or os.environ.get('DRONE_NAME', 'unknown_drone')
        self.logger = logger or setup_logging(self.drone_name)

        # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –ø–æ–∑–∏—Ü–∏–π –∫–∞–∂–¥–æ–≥–æ —Ä–æ–≤–µ—Ä–∞
        self.rover_positions = {}
        for rover_id in rovers.keys():
            self.rover_positions[rover_id] = {'x': 0, 'y': 0, 'yaw': 0}

    def send_command(self, rover_id, command_str):
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.logger.info(f"ü§ñ MOCK: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id}: {command_str}")
        self.logger.info(f"ü§ñ MOCK: –ö–æ–º–∞–Ω–¥–∞ —Ä–æ–≤–µ—Ä—É {rover_id}: {command_str} - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True

    def get_pose(self, rover_id):
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return None
            
        self.logger.info(f"ü§ñ MOCK: –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–≤–µ—Ä–∞ {rover_id}")
        return True

    def navigate(self, rover_id, x=0, y=0, yaw=0):
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.logger.info(f"ü§ñ MOCK: –ù–∞—á–∞–ª–æ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ —Ä–æ–≤–µ—Ä–∞ {rover_id} -> ({x}, {y}, {yaw})")
        
        self.send_command(rover_id, f"TARGET:{x},{y}")
        current_pos = self.rover_positions[rover_id]
        self.send_command(rover_id, f"POSE:{current_pos['x']},{current_pos['y']},{current_pos['yaw']}")
        
        self.logger.info(f"ü§ñ MOCK: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ {rover_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–æ–≤–µ—Ä–∞
        self.rover_positions[rover_id] = {'x': x, 'y': y, 'yaw': yaw}
        return True
    
    def set_rover_position(self, rover_id, x, y, yaw):
        """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é —Ä–æ–≤–µ—Ä–∞ (–¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–∑ –≤–Ω–µ—à–Ω–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤)"""
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.rover_positions[rover_id] = {'x': x, 'y': y, 'yaw': yaw}
        self.logger.info(f"ü§ñ MOCK: –û–±–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–∑–∏—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ {rover_id}: ({x}, {y}, {yaw})")
        return True


# –í—ã–±–æ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
_impl = os.getenv('ROVER_IMPL', 'main').lower()
if _impl == 'mock':
    RoverController = RoverControllerMock
else:
    RoverController = RoverControllerMain