import logging
import socket
import os

try:
    from .helpers import setup_logging
    from .const import rovers
except ImportError:
    from helpers import setup_logging
    from const import rovers

class RoverControllerMain:
    def __init__(self, logger=None):
        self.logger = logger or setup_logging('rover')
        
        self.sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

    def send_command(self, rover_id, command_str):
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        rover_config = rovers[rover_id]
        robot_ip = rover_config['ip']
        robot_port = rover_config['port']
        
        self.logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id} ({robot_ip}:{robot_port}): {command_str}")
        try:
            self.sock.sendto(command_str.encode('utf-8'), (robot_ip, robot_port))
            return True
        except Exception as e:
            self.logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id}: {e}")
            return False

    def get_pose(self, rover_id):
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return None
            
        self.logger.info(f"–ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–≤–µ—Ä–∞ {rover_id}")
        return self.send_command(rover_id, "POSE")

    def navigate(self, rover_id, current_x, current_y, current_yaw, target_x, target_y):
        """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏.
        
        Args:
            rover_id: ID —Ä–æ–≤–µ—Ä–∞
            current_x, current_y: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
            current_yaw: –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (-180 –¥–æ 180)
            target_x, target_y: –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
        """
        if rover_id not in rovers:
            self.logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.logger.info(f"–ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ {rover_id}: ({current_x:.3f}, {current_y:.3f}, {current_yaw:.1f}¬∞) -> ({target_x:.3f}, {target_y:.3f})")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å (TARGET)
        if not self.send_command(rover_id, f"TARGET:{target_x:.3f},{target_y:.3f}"):
            return False
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è (POSE)
        if not self.send_command(rover_id, f"POSE:{current_x:.3f},{current_y:.3f},{current_yaw:.1f}"):
            return False
            
        self.logger.info(f"–ö–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ä–æ–≤–µ—Ä—É {rover_id}. –†–æ–±–æ—Ç –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∞—Ç—å –¥–≤–∏–∂–µ–Ω–∏–µ")
        return True
    



class RoverControllerMock:
    def __init__(self, drone_name=None, logger=None):
        self.drone_name = drone_name or os.environ.get('DRONE_NAME', 'unknown_drone')
        self.logger = logger or setup_logging(self.drone_name)

    def send_command(self, rover_id, command_str):
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.logger.info(f"ü§ñ MOCK: –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã —Ä–æ–≤–µ—Ä—É {rover_id}: {command_str}")
        self.logger.info(f"ü§ñ MOCK: –ö–æ–º–∞–Ω–¥–∞ —Ä–æ–≤–µ—Ä—É {rover_id}: {command_str} - –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        return True

    def get_pose(self, rover_id):
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return None
            
        self.logger.info(f"ü§ñ MOCK: –ó–∞–ø—Ä–æ—Å –ø–æ–∑–∏—Ü–∏–∏ —Ä–æ–≤–µ—Ä–∞ {rover_id}")
        return True

    def navigate(self, rover_id, current_x, current_y, current_yaw, target_x, target_y):
        """
        –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ —Å–æ–≥–ª–∞—Å–Ω–æ API –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (MOCK –≤–µ—Ä—Å–∏—è).
        
        Args:
            rover_id: ID —Ä–æ–≤–µ—Ä–∞
            current_x, current_y: –¢–µ–∫—É—â–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
            current_yaw: –¢–µ–∫—É—â–∏–π —É–≥–æ–ª –≤ –≥—Ä–∞–¥—É—Å–∞—Ö (-180 –¥–æ 180)
            target_x, target_y: –¶–µ–ª–µ–≤–∞—è –ø–æ–∑–∏—Ü–∏—è –≤ –º–µ—Ç—Ä–∞—Ö
        """
        if rover_id not in rovers:
            self.logger.error(f"ü§ñ MOCK: –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π ID —Ä–æ–≤–µ—Ä–∞: {rover_id}")
            return False
            
        self.logger.info(f"ü§ñ MOCK: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ {rover_id}: ({current_x:.3f}, {current_y:.3f}, {current_yaw:.1f}¬∞) -> ({target_x:.3f}, {target_y:.3f})")
        
        # 1. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ü–µ–ª—å (TARGET)
        self.send_command(rover_id, f"TARGET:{target_x:.3f},{target_y:.3f}")
        
        # 2. –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –ø–æ–∑–∏—Ü–∏—é –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–≤–∏–∂–µ–Ω–∏—è (POSE)
        self.send_command(rover_id, f"POSE:{current_x:.3f},{current_y:.3f},{current_yaw:.1f}")
        
        self.logger.info(f"ü§ñ MOCK: –ù–∞–≤–∏–≥–∞—Ü–∏—è —Ä–æ–≤–µ—Ä–∞ {rover_id} –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        return True
    



# –í—ã–±–æ—Ä —Ä–µ–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
_impl = os.getenv('ROVER_IMPL', 'main').lower()
if _impl == 'mock':
    RoverController = RoverControllerMock
else:
    RoverController = RoverControllerMain