#!/usr/bin/env bash

# Скрипт для проверки работоспособности обоих режимов:
# 1. Централизованный (один дрон делает все вычисления)
# 2. Децентрализованный (мастер распределяет задачи на воркеров)

# Цвета для вывода
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

echo -e "${YELLOW}=== ЗАПУСК КОМПЛЕКСНОЙ ПРОВЕРКИ ===${NC}"

# --- 1. ПРОВЕРКА ЦЕНТРАЛИЗОВАННОГО РЕЖИМА ---
echo -e "\n${YELLOW}--- 1. Тестирование централизованного режима... ---${NC}"

# Запускаем тест в централизованном режиме и сохраняем вывод в переменную
centralized_output=$(python test_distributed.py --mode centralized 2>&1)

# Проверяем, что тест завершился успешно и причина решения верна
if echo "$centralized_output" | grep -q "Тест завершен." && echo "$centralized_output" | grep -q "Причина: centralized_stockfish"; then
    echo -e "${GREEN}✓ Централизованный режим работает корректно.${NC}"
    echo "  - Лог содержит 'Тест завершен.'"
    echo "  - Причина принятия решения: 'centralized_stockfish'."
else
    echo -e "${RED}✗ ОШИБКА в централизованном режиме!${NC}"
    echo "  - Вывод теста:"
    echo "$centralized_output"
    exit 1
fi

# --- 2. ПРОВЕРКА ДЕЦЕНТРАЛИЗОВАННОГО РЕЖИМА ---
echo -e "\n${YELLOW}--- 2. Тестирование децентрализованного режима... ---${NC}"
echo "Этот тест проверит, что мастер пытается связаться с воркерами."
echo "Для полной проверки убедитесь, что воркеры запущены на дронах."

# Запускаем тест в распределенном режиме
distributed_output=$(python test_distributed.py --mode distributed 2>&1)

# Проверяем ключевые этапы в логе
if echo "$distributed_output" | grep -q "Этап 1: Локальный поиск" && \
   echo "$distributed_output" | grep -q "Этап 2: Распределение" && \
   echo "$distributed_output" | grep -q "Этап 3: Агрегация результатов" && \
   echo "$distributed_output" | grep -q "Тест завершен."; then
    echo -e "${GREEN}✓ Децентрализованный режим запускается корректно.${NC}"
    echo "  - Лог содержит все ключевые этапы (1, 2, 3)."
    echo "  - Мастер-процесс успешно завершает работу."
    # Проверяем, была ли попытка соединения (даже если неудачная)
    if echo "$distributed_output" | grep -q "Ошибка для ветви"; then
        echo -e "${YELLOW}  - Примечание: Были зафиксированы ошибки соединения с воркерами. Это ожидаемо, если воркеры не запущены. Главное, что мастер пытается соединиться.${NC}"
    elif echo "$distributed_output" | grep -q "Результат для ветви"; then
        echo -e "${GREEN}  - Отлично! Мастер успешно получил ответы от воркеров.${NC}"
    fi
else
    echo -e "${RED}✗ ОШИБКА в децентрализованном режиме!${NC}"
    echo "  - Вывод теста:"
    echo "$distributed_output"
    exit 1
fi

echo -e "\n${GREEN}=== ✅ ВСЕ ПРОВЕРКИ УСПЕШНО ПРОЙДЕНЫ ===${NC}"
echo "Вы можете развертывать FastAPI сервер (`drone/fast_api_priem.py`) на дронах."
echo "Централизованный режим будет работать всегда, а децентрализованный — когда воркеры доступны."
